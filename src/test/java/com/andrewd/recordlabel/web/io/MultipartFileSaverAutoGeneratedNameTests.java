package com.andrewd.recordlabel.web.io;

import com.andrewd.recordlabel.io.*;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.web.multipart.MultipartFile;
import java.io.*;

import static org.mockito.Mockito.times;

@RunWith(MockitoJUnitRunner.class)
public class MultipartFileSaverAutoGeneratedNameTests {

    @InjectMocks
    MultipartFileSaverAutoGeneratedName component;

    @Mock
    FileExtensionGetter fileExtensionGetter;

    @Mock
    RandomFileCreator randomFileCreator;

    private MultipartFile sourceFile;

    private File targetDirectory;
    private File savedFile;

    private final String fileNamePrefix = "img";
    private final String fileExtension = ".ext";
    private final String fileName = "file name.ext";

    @Before
    public void init() throws IOException {
        component.fileNamePrefix = fileNamePrefix;

        savedFile = Mockito.mock(File.class);
        targetDirectory = Mockito.mock(File.class);

        sourceFile = Mockito.mock(MultipartFile.class);

        Mockito.when(sourceFile.getOriginalFilename())
                .thenReturn(fileName);

        Mockito.when(fileExtensionGetter
                .getFileExtension(
                        Matchers.anyString(),
                        Matchers.anyBoolean()))
                .thenReturn(fileExtension);

        Mockito.when(randomFileCreator
                .createFile(
                        Matchers.anyString(),
                        Matchers.anyString(),
                        Matchers.any(File.class)))
                .thenReturn((savedFile));
    }

    @Test
    public void mustGetFileExtensionWithDot() throws IOException {
        component.saveFile(sourceFile, targetDirectory);

        Mockito.verify(fileExtensionGetter, times(1))
                .getFileExtension(
                        Matchers.eq(fileName),
                        Matchers.eq(true));
    }

    @Test
    public void mustSaveFileUsingRandomFileCreator_passingInTargetDir_prefix_AndOriginalFileExtension() throws IOException {
        component.saveFile(sourceFile, targetDirectory);

        Mockito.verify(randomFileCreator, times(1))
                .createFile(
                    Matchers.eq(fileNamePrefix),
                    Matchers.eq(fileExtension),
                    Matchers.eq(targetDirectory));
    }

    @Test
    public void mustTransferInputMultipartFileToTheFileOnFileSystem() throws IOException {
        component.saveFile(sourceFile, targetDirectory);

        Mockito.verify(sourceFile, times(1))
                .transferTo(Matchers.eq(savedFile));
    }

    @Test
    public void mustReturnSavedFile() throws IOException {
        File result = component.saveFile(sourceFile, targetDirectory);

        Assert.assertEquals(savedFile, result);
    }
}